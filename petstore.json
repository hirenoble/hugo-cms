{
  "swagger": "2.0",
  "schemes": ["http", "https"],
  "host": "petstore.swagger.io",
  "basePath": "/v2",
  "info": {
    "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n# Authentication\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\n\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n<!-- ReDoc-Inject: <security-definitions> -->\n",
    "version": "1.0.0",
    "title": "Swagger Petstore",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io",
      "url": "https://github.com/Redocly/redoc"
    },
    "x-logo": {
      "url": "https://redocly.github.io/redoc/petstore-logo.png",
      "altText": "Petstore logo"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "externalDocs": {
    "description": "Find out how to create Github repo for your OpenAPI spec.",
    "url": "https://github.com/Rebilly/generator-openapi-repo"
  },
  "tags": [
    { "name": "pet", "description": "Everything about your Pets" },
    { "name": "store", "description": "Access to Petstore orders" },
    { "name": "user", "description": "Operations about user" }
  ],
  "x-tagGroups": [
    { "name": "General", "tags": ["pet", "store"] },
    { "name": "User Management", "tags": ["user"] }
  ],
  "securityDefinitions": {
    "petstore_auth": {
      "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
      "type": "oauth2",
      "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "write:pets": "modify pets in your account",
        "read:pets": "read your pets"
      }
    },
    "api_key": {
      "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "x-servers": [
    { "url": "//petstore.swagger.io/v2", "description": "Default server" },
    { "url": "//petstore.swagger.io/sandbox", "description": "Sandbox server" }
  ],
  "paths": {
    "/pet": {
      "post": {
        "tags": ["pet"],
        "summary": "Add a new pet to the store",
        "description": "Add new pet to the store inventory.",
        "operationId": "addPet",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Pet object that needs to be added to the store",
            "required": true,
            "schema": { "$ref": "#/definitions/Pet" }
          }
        ],
        "responses": { "405": { "description": "Invalid input" } },
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }],
        "x-code-samples": [
          {
            "lang": "shell",
            "source": "curl --request POST \\\n  --url http://petstore.swagger.io/v2/pet \\\n  --header 'accept: application/xml' \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"id\":0,\"category\":{\"id\":0,\"name\":\"string\",\"sub\":{\"prop1\":\"string\"}},\"name\":\"Guru\",\"photoUrls\":[\"string\"],\"tags\":[{\"id\":0,\"name\":\"string\"}],\"status\":\"available\",\"petType\":\"string\"}'"
          },
          {
            "lang": "node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'POST',\n  url: 'http://petstore.swagger.io/v2/pet',\n  headers: {\n    accept: 'application/xml',\n    'content-type': 'application/json',\n    authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    id: 0,\n    category: {id: 0, name: 'string', sub: {prop1: 'string'}},\n    name: 'Guru',\n    photoUrls: ['string'],\n    tags: [{id: 0, name: 'string'}],\n    status: 'available',\n    petType: 'string'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://petstore.swagger.io/v2/pet');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'accept' => 'application/xml',\n  'content-type' => 'application/json',\n  'authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n));\n\n$request->setBody('{\"id\":0,\"category\":{\"id\":0,\"name\":\"string\",\"sub\":{\"prop1\":\"string\"}},\"name\":\"Guru\",\"photoUrls\":[\"string\"],\"tags\":[{\"id\":0,\"name\":\"string\"}],\"status\":\"available\",\"petType\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.post(\"http://petstore.swagger.io/v2/pet\")\n  .header(\"accept\", \"application/xml\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"id\\\":0,\\\"category\\\":{\\\"id\\\":0,\\\"name\\\":\\\"string\\\",\\\"sub\\\":{\\\"prop1\\\":\\\"string\\\"}},\\\"name\\\":\\\"Guru\\\",\\\"photoUrls\\\":[\\\"string\\\"],\\\"tags\\\":[{\\\"id\\\":0,\\\"name\\\":\\\"string\\\"}],\\\"status\\\":\\\"available\\\",\\\"petType\\\":\\\"string\\\"}\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://petstore.swagger.io/v2/pet\"\n\n\tpayload := strings.NewReader(\"{\\\"id\\\":0,\\\"category\\\":{\\\"id\\\":0,\\\"name\\\":\\\"string\\\",\\\"sub\\\":{\\\"prop1\\\":\\\"string\\\"}},\\\"name\\\":\\\"Guru\\\",\\\"photoUrls\\\":[\\\"string\\\"],\\\"tags\\\":[{\\\"id\\\":0,\\\"name\\\":\\\"string\\\"}],\\\"status\\\":\\\"available\\\",\\\"petType\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/xml\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"petstore.swagger.io\")\n\npayload = \"{\\\"id\\\":0,\\\"category\\\":{\\\"id\\\":0,\\\"name\\\":\\\"string\\\",\\\"sub\\\":{\\\"prop1\\\":\\\"string\\\"}},\\\"name\\\":\\\"Guru\\\",\\\"photoUrls\\\":[\\\"string\\\"],\\\"tags\\\":[{\\\"id\\\":0,\\\"name\\\":\\\"string\\\"}],\\\"status\\\":\\\"available\\\",\\\"petType\\\":\\\"string\\\"}\"\n\nheaders = {\n    'accept': \"application/xml\",\n    'content-type': \"application/json\",\n    'authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v2/pet\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"http://petstore.swagger.io/v2/pet\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"accept\", \"application/xml\");\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nrequest.AddParameter(\"application/json\", \"{\\\"id\\\":0,\\\"category\\\":{\\\"id\\\":0,\\\"name\\\":\\\"string\\\",\\\"sub\\\":{\\\"prop1\\\":\\\"string\\\"}},\\\"name\\\":\\\"Guru\\\",\\\"photoUrls\\\":[\\\"string\\\"],\\\"tags\\\":[{\\\"id\\\":0,\\\"name\\\":\\\"string\\\"}],\\\"status\\\":\\\"available\\\",\\\"petType\\\":\\\"string\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://petstore.swagger.io/v2/pet\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"accept\"] = 'application/xml'\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"id\\\":0,\\\"category\\\":{\\\"id\\\":0,\\\"name\\\":\\\"string\\\",\\\"sub\\\":{\\\"prop1\\\":\\\"string\\\"}},\\\"name\\\":\\\"Guru\\\",\\\"photoUrls\\\":[\\\"string\\\"],\\\"tags\\\":[{\\\"id\\\":0,\\\"name\\\":\\\"string\\\"}],\\\"status\\\":\\\"available\\\",\\\"petType\\\":\\\"string\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "put": {
        "tags": ["pet"],
        "summary": "Update an existing pet",
        "description": "",
        "operationId": "updatePet",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Pet object that needs to be added to the store",
            "required": true,
            "schema": { "$ref": "#/definitions/Pet" }
          }
        ],
        "responses": {
          "400": { "description": "Invalid ID supplied" },
          "404": { "description": "Pet not found" },
          "405": { "description": "Validation exception" }
        },
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }],
        "x-code-samples": [
          {
            "lang": "shell",
            "source": "curl --request PUT \\\n  --url http://petstore.swagger.io/v2/pet \\\n  --header 'accept: application/xml' \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"id\":0,\"category\":{\"id\":0,\"name\":\"string\",\"sub\":{\"prop1\":\"string\"}},\"name\":\"Guru\",\"photoUrls\":[\"string\"],\"tags\":[{\"id\":0,\"name\":\"string\"}],\"status\":\"available\",\"petType\":\"string\"}'"
          },
          {
            "lang": "node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'PUT',\n  url: 'http://petstore.swagger.io/v2/pet',\n  headers: {\n    accept: 'application/xml',\n    'content-type': 'application/json',\n    authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    id: 0,\n    category: {id: 0, name: 'string', sub: {prop1: 'string'}},\n    name: 'Guru',\n    photoUrls: ['string'],\n    tags: [{id: 0, name: 'string'}],\n    status: 'available',\n    petType: 'string'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://petstore.swagger.io/v2/pet');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'accept' => 'application/xml',\n  'content-type' => 'application/json',\n  'authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n));\n\n$request->setBody('{\"id\":0,\"category\":{\"id\":0,\"name\":\"string\",\"sub\":{\"prop1\":\"string\"}},\"name\":\"Guru\",\"photoUrls\":[\"string\"],\"tags\":[{\"id\":0,\"name\":\"string\"}],\"status\":\"available\",\"petType\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.put(\"http://petstore.swagger.io/v2/pet\")\n  .header(\"accept\", \"application/xml\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .body(\"{\\\"id\\\":0,\\\"category\\\":{\\\"id\\\":0,\\\"name\\\":\\\"string\\\",\\\"sub\\\":{\\\"prop1\\\":\\\"string\\\"}},\\\"name\\\":\\\"Guru\\\",\\\"photoUrls\\\":[\\\"string\\\"],\\\"tags\\\":[{\\\"id\\\":0,\\\"name\\\":\\\"string\\\"}],\\\"status\\\":\\\"available\\\",\\\"petType\\\":\\\"string\\\"}\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://petstore.swagger.io/v2/pet\"\n\n\tpayload := strings.NewReader(\"{\\\"id\\\":0,\\\"category\\\":{\\\"id\\\":0,\\\"name\\\":\\\"string\\\",\\\"sub\\\":{\\\"prop1\\\":\\\"string\\\"}},\\\"name\\\":\\\"Guru\\\",\\\"photoUrls\\\":[\\\"string\\\"],\\\"tags\\\":[{\\\"id\\\":0,\\\"name\\\":\\\"string\\\"}],\\\"status\\\":\\\"available\\\",\\\"petType\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/xml\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"petstore.swagger.io\")\n\npayload = \"{\\\"id\\\":0,\\\"category\\\":{\\\"id\\\":0,\\\"name\\\":\\\"string\\\",\\\"sub\\\":{\\\"prop1\\\":\\\"string\\\"}},\\\"name\\\":\\\"Guru\\\",\\\"photoUrls\\\":[\\\"string\\\"],\\\"tags\\\":[{\\\"id\\\":0,\\\"name\\\":\\\"string\\\"}],\\\"status\\\":\\\"available\\\",\\\"petType\\\":\\\"string\\\"}\"\n\nheaders = {\n    'accept': \"application/xml\",\n    'content-type': \"application/json\",\n    'authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"/v2/pet\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"http://petstore.swagger.io/v2/pet\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"accept\", \"application/xml\");\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nrequest.AddParameter(\"application/json\", \"{\\\"id\\\":0,\\\"category\\\":{\\\"id\\\":0,\\\"name\\\":\\\"string\\\",\\\"sub\\\":{\\\"prop1\\\":\\\"string\\\"}},\\\"name\\\":\\\"Guru\\\",\\\"photoUrls\\\":[\\\"string\\\"],\\\"tags\\\":[{\\\"id\\\":0,\\\"name\\\":\\\"string\\\"}],\\\"status\\\":\\\"available\\\",\\\"petType\\\":\\\"string\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://petstore.swagger.io/v2/pet\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"accept\"] = 'application/xml'\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"id\\\":0,\\\"category\\\":{\\\"id\\\":0,\\\"name\\\":\\\"string\\\",\\\"sub\\\":{\\\"prop1\\\":\\\"string\\\"}},\\\"name\\\":\\\"Guru\\\",\\\"photoUrls\\\":[\\\"string\\\"],\\\"tags\\\":[{\\\"id\\\":0,\\\"name\\\":\\\"string\\\"}],\\\"status\\\":\\\"available\\\",\\\"petType\\\":\\\"string\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/pet/{petId}": {
      "get": {
        "tags": ["pet"],
        "summary": "Find pet by ID",
        "description": "Returns a single pet",
        "operationId": "getPetById",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/Pet" }
          },
          "400": { "description": "Invalid ID supplied" },
          "404": { "description": "Pet not found" }
        },
        "security": [{ "api_key": [] }],
        "x-code-samples": [
          {
            "lang": "shell",
            "source": "curl --request GET \\\n  --url http://petstore.swagger.io/v2/pet/%7BpetId%7D \\\n  --header 'api_key: REPLACE_KEY_VALUE' \\\n  --header 'content-type: application/json'"
          },
          {
            "lang": "node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'http://petstore.swagger.io/v2/pet/%7BpetId%7D',\n  headers: {'content-type': 'application/json', api_key: 'REPLACE_KEY_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://petstore.swagger.io/v2/pet/%7BpetId%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'api_key' => 'REPLACE_KEY_VALUE'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.get(\"http://petstore.swagger.io/v2/pet/%7BpetId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"api_key\", \"REPLACE_KEY_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://petstore.swagger.io/v2/pet/%7BpetId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"api_key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"petstore.swagger.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'api_key': \"REPLACE_KEY_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v2/pet/%7BpetId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"http://petstore.swagger.io/v2/pet/%7BpetId%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"api_key\", \"REPLACE_KEY_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://petstore.swagger.io/v2/pet/%7BpetId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"api_key\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "post": {
        "tags": ["pet"],
        "summary": "Updates a pet in the store with form data",
        "description": "",
        "operationId": "updatePetWithForm",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet that needs to be updated",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "name",
            "in": "formData",
            "description": "Updated name of the pet",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "formData",
            "description": "Updated status of the pet",
            "required": false,
            "type": "string"
          }
        ],
        "responses": { "405": { "description": "Invalid input" } },
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }],
        "x-code-samples": [
          {
            "lang": "shell",
            "source": "curl --request POST \\\n  --url http://petstore.swagger.io/v2/pet/%7BpetId%7D \\\n  --header 'accept: application/x-www-form-urlencoded' \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json'"
          },
          {
            "lang": "node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'POST',\n  url: 'http://petstore.swagger.io/v2/pet/%7BpetId%7D',\n  headers: {\n    accept: 'application/x-www-form-urlencoded',\n    'content-type': 'application/json',\n    authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://petstore.swagger.io/v2/pet/%7BpetId%7D');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'accept' => 'application/x-www-form-urlencoded',\n  'content-type' => 'application/json',\n  'authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.post(\"http://petstore.swagger.io/v2/pet/%7BpetId%7D\")\n  .header(\"accept\", \"application/x-www-form-urlencoded\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://petstore.swagger.io/v2/pet/%7BpetId%7D\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"accept\", \"application/x-www-form-urlencoded\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"petstore.swagger.io\")\n\nheaders = {\n    'accept': \"application/x-www-form-urlencoded\",\n    'content-type': \"application/json\",\n    'authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v2/pet/%7BpetId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"http://petstore.swagger.io/v2/pet/%7BpetId%7D\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"accept\", \"application/x-www-form-urlencoded\");\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://petstore.swagger.io/v2/pet/%7BpetId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"accept\"] = 'application/x-www-form-urlencoded'\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "delete": {
        "tags": ["pet"],
        "summary": "Deletes a pet",
        "description": "",
        "operationId": "deletePet",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "required": false,
            "type": "string",
            "x-example": "Bearer <TOKEN>"
          },
          {
            "name": "petId",
            "in": "path",
            "description": "Pet id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": { "400": { "description": "Invalid pet value" } },
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }],
        "x-code-samples": [
          {
            "lang": "shell",
            "source": "curl --request DELETE \\\n  --url http://petstore.swagger.io/v2/pet/%7BpetId%7D \\\n  --header 'api_key: SOME_STRING_VALUE' \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json'"
          },
          {
            "lang": "node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'DELETE',\n  url: 'http://petstore.swagger.io/v2/pet/%7BpetId%7D',\n  headers: {\n    'content-type': 'application/json',\n    api_key: 'SOME_STRING_VALUE',\n    authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://petstore.swagger.io/v2/pet/%7BpetId%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'api_key' => 'SOME_STRING_VALUE',\n  'authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.delete(\"http://petstore.swagger.io/v2/pet/%7BpetId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"api_key\", \"SOME_STRING_VALUE\")\n  .header(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://petstore.swagger.io/v2/pet/%7BpetId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"api_key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"petstore.swagger.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'api_key': \"SOME_STRING_VALUE\",\n    'authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"DELETE\", \"/v2/pet/%7BpetId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"http://petstore.swagger.io/v2/pet/%7BpetId%7D\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"api_key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://petstore.swagger.io/v2/pet/%7BpetId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"api_key\"] = 'SOME_STRING_VALUE'\nrequest[\"authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/pet/{petId}/uploadImage": {
      "post": {
        "tags": ["pet"],
        "summary": "uploads an image",
        "description": "",
        "operationId": "uploadFile",
        "consumes": ["multipart/form-data"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet to update",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "additionalMetadata",
            "in": "formData",
            "description": "Additional data to pass to server",
            "required": false,
            "type": "string"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "file to upload",
            "required": false,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/ApiResponse" }
          }
        },
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }],
        "x-code-samples": [
          {
            "lang": "shell",
            "source": "curl --request POST \\\n  --url http://petstore.swagger.io/v2/pet/%7BpetId%7D/uploadImage \\\n  --header 'accept: multipart/form-data' \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json'"
          },
          {
            "lang": "node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'POST',\n  url: 'http://petstore.swagger.io/v2/pet/%7BpetId%7D/uploadImage',\n  headers: {\n    accept: 'multipart/form-data',\n    'content-type': 'application/json',\n    authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://petstore.swagger.io/v2/pet/%7BpetId%7D/uploadImage');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'accept' => 'multipart/form-data',\n  'content-type' => 'application/json',\n  'authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.post(\"http://petstore.swagger.io/v2/pet/%7BpetId%7D/uploadImage\")\n  .header(\"accept\", \"multipart/form-data\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://petstore.swagger.io/v2/pet/%7BpetId%7D/uploadImage\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"accept\", \"multipart/form-data\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"petstore.swagger.io\")\n\nheaders = {\n    'accept': \"multipart/form-data\",\n    'content-type': \"application/json\",\n    'authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v2/pet/%7BpetId%7D/uploadImage\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"http://petstore.swagger.io/v2/pet/%7BpetId%7D/uploadImage\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"accept\", \"multipart/form-data\");\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://petstore.swagger.io/v2/pet/%7BpetId%7D/uploadImage\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"accept\"] = 'multipart/form-data'\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/pet/findByStatus": {
      "get": {
        "tags": ["pet"],
        "summary": "Finds Pets by status",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findPetsByStatus",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Status values that need to be considered for filter",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["available", "pending", "sold"],
              "default": "available"
            },
            "collectionFormat": "csv"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/Pet" }
            }
          },
          "400": { "description": "Invalid status value" }
        },
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }],
        "x-code-samples": [
          {
            "lang": "shell",
            "source": "curl --request GET \\\n  --url 'http://petstore.swagger.io/v2/pet/findByStatus?status=SOME_ARRAY_VALUE' \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json'"
          },
          {
            "lang": "node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'http://petstore.swagger.io/v2/pet/findByStatus',\n  qs: {status: 'SOME_ARRAY_VALUE'},\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://petstore.swagger.io/v2/pet/findByStatus');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData(array(\n  'status' => 'SOME_ARRAY_VALUE'\n));\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.get(\"http://petstore.swagger.io/v2/pet/findByStatus?status=SOME_ARRAY_VALUE\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://petstore.swagger.io/v2/pet/findByStatus?status=SOME_ARRAY_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"petstore.swagger.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"GET\", \"/v2/pet/findByStatus?status=SOME_ARRAY_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"http://petstore.swagger.io/v2/pet/findByStatus?status=SOME_ARRAY_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://petstore.swagger.io/v2/pet/findByStatus?status=SOME_ARRAY_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/pet/findByTags": {
      "get": {
        "tags": ["pet"],
        "summary": "Finds Pets by tags",
        "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
        "operationId": "findPetsByTags",
        "deprecated": true,
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "description": "Tags to filter by",
            "required": true,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "csv"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/Pet" }
            }
          },
          "400": { "description": "Invalid tag value" }
        },
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }],
        "x-code-samples": [
          {
            "lang": "shell",
            "source": "curl --request GET \\\n  --url 'http://petstore.swagger.io/v2/pet/findByTags?tags=SOME_ARRAY_VALUE' \\\n  --header 'authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json'"
          },
          {
            "lang": "node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'http://petstore.swagger.io/v2/pet/findByTags',\n  qs: {tags: 'SOME_ARRAY_VALUE'},\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://petstore.swagger.io/v2/pet/findByTags');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData(array(\n  'tags' => 'SOME_ARRAY_VALUE'\n));\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.get(\"http://petstore.swagger.io/v2/pet/findByTags?tags=SOME_ARRAY_VALUE\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://petstore.swagger.io/v2/pet/findByTags?tags=SOME_ARRAY_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"petstore.swagger.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"GET\", \"/v2/pet/findByTags?tags=SOME_ARRAY_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"http://petstore.swagger.io/v2/pet/findByTags?tags=SOME_ARRAY_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer REPLACE_BEARER_TOKEN\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://petstore.swagger.io/v2/pet/findByTags?tags=SOME_ARRAY_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/store/inventory": {
      "get": {
        "tags": ["store"],
        "summary": "Returns pet inventories by status",
        "description": "Returns a map of status codes to quantities",
        "operationId": "getInventory",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": { "type": "integer", "format": "int32" }
            }
          }
        },
        "security": [{ "api_key": [] }],
        "x-code-samples": [
          {
            "lang": "shell",
            "source": "curl --request GET \\\n  --url http://petstore.swagger.io/v2/store/inventory \\\n  --header 'api_key: REPLACE_KEY_VALUE' \\\n  --header 'content-type: application/json'"
          },
          {
            "lang": "node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'http://petstore.swagger.io/v2/store/inventory',\n  headers: {'content-type': 'application/json', api_key: 'REPLACE_KEY_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://petstore.swagger.io/v2/store/inventory');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json',\n  'api_key' => 'REPLACE_KEY_VALUE'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.get(\"http://petstore.swagger.io/v2/store/inventory\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"api_key\", \"REPLACE_KEY_VALUE\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://petstore.swagger.io/v2/store/inventory\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"api_key\", \"REPLACE_KEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"petstore.swagger.io\")\n\nheaders = {\n    'content-type': \"application/json\",\n    'api_key': \"REPLACE_KEY_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v2/store/inventory\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"http://petstore.swagger.io/v2/store/inventory\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"api_key\", \"REPLACE_KEY_VALUE\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://petstore.swagger.io/v2/store/inventory\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"api_key\"] = 'REPLACE_KEY_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/store/order": {
      "post": {
        "tags": ["store"],
        "summary": "Place an order for a pet",
        "description": "",
        "operationId": "placeOrder",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "order placed for purchasing the pet",
            "required": true,
            "schema": { "$ref": "#/definitions/Order" }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/Order" }
          },
          "400": { "description": "Invalid Order" }
        },
        "x-code-samples": [
          {
            "lang": "shell",
            "source": "curl --request POST \\\n  --url http://petstore.swagger.io/v2/store/order \\\n  --header 'content-type: application/json' \\\n  --data '{\"id\":0,\"petId\":0,\"quantity\":1,\"shipDate\":\"2019-08-24T14:15:22Z\",\"status\":\"placed\",\"complete\":false}'"
          },
          {
            "lang": "node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'POST',\n  url: 'http://petstore.swagger.io/v2/store/order',\n  headers: {'content-type': 'application/json'},\n  body: {\n    id: 0,\n    petId: 0,\n    quantity: 1,\n    shipDate: '2019-08-24T14:15:22Z',\n    status: 'placed',\n    complete: false\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://petstore.swagger.io/v2/store/order');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json'\n));\n\n$request->setBody('{\"id\":0,\"petId\":0,\"quantity\":1,\"shipDate\":\"2019-08-24T14:15:22Z\",\"status\":\"placed\",\"complete\":false}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.post(\"http://petstore.swagger.io/v2/store/order\")\n  .header(\"content-type\", \"application/json\")\n  .body(\"{\\\"id\\\":0,\\\"petId\\\":0,\\\"quantity\\\":1,\\\"shipDate\\\":\\\"2019-08-24T14:15:22Z\\\",\\\"status\\\":\\\"placed\\\",\\\"complete\\\":false}\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://petstore.swagger.io/v2/store/order\"\n\n\tpayload := strings.NewReader(\"{\\\"id\\\":0,\\\"petId\\\":0,\\\"quantity\\\":1,\\\"shipDate\\\":\\\"2019-08-24T14:15:22Z\\\",\\\"status\\\":\\\"placed\\\",\\\"complete\\\":false}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"petstore.swagger.io\")\n\npayload = \"{\\\"id\\\":0,\\\"petId\\\":0,\\\"quantity\\\":1,\\\"shipDate\\\":\\\"2019-08-24T14:15:22Z\\\",\\\"status\\\":\\\"placed\\\",\\\"complete\\\":false}\"\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"POST\", \"/v2/store/order\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"http://petstore.swagger.io/v2/store/order\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddParameter(\"application/json\", \"{\\\"id\\\":0,\\\"petId\\\":0,\\\"quantity\\\":1,\\\"shipDate\\\":\\\"2019-08-24T14:15:22Z\\\",\\\"status\\\":\\\"placed\\\",\\\"complete\\\":false}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://petstore.swagger.io/v2/store/order\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"id\\\":0,\\\"petId\\\":0,\\\"quantity\\\":1,\\\"shipDate\\\":\\\"2019-08-24T14:15:22Z\\\",\\\"status\\\":\\\"placed\\\",\\\"complete\\\":false}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/store/order/{orderId}": {
      "get": {
        "tags": ["store"],
        "summary": "Find purchase order by ID",
        "description": "For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions",
        "operationId": "getOrderById",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of pet that needs to be fetched",
            "required": true,
            "type": "integer",
            "maximum": 5,
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/Order" }
          },
          "400": { "description": "Invalid ID supplied" },
          "404": { "description": "Order not found" }
        },
        "x-code-samples": [
          {
            "lang": "shell",
            "source": "curl --request GET \\\n  --url http://petstore.swagger.io/v2/store/order/%7BorderId%7D \\\n  --header 'content-type: application/json'"
          },
          {
            "lang": "node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'http://petstore.swagger.io/v2/store/order/%7BorderId%7D',\n  headers: {'content-type': 'application/json'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://petstore.swagger.io/v2/store/order/%7BorderId%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.get(\"http://petstore.swagger.io/v2/store/order/%7BorderId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://petstore.swagger.io/v2/store/order/%7BorderId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"petstore.swagger.io\")\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"GET\", \"/v2/store/order/%7BorderId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"http://petstore.swagger.io/v2/store/order/%7BorderId%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://petstore.swagger.io/v2/store/order/%7BorderId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "delete": {
        "tags": ["store"],
        "summary": "Delete purchase order by ID",
        "description": "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",
        "operationId": "deleteOrder",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of the order that needs to be deleted",
            "required": true,
            "type": "string",
            "minimum": 1
          }
        ],
        "responses": {
          "400": { "description": "Invalid ID supplied" },
          "404": { "description": "Order not found" }
        },
        "x-code-samples": [
          {
            "lang": "shell",
            "source": "curl --request DELETE \\\n  --url http://petstore.swagger.io/v2/store/order/%7BorderId%7D \\\n  --header 'content-type: application/json'"
          },
          {
            "lang": "node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'DELETE',\n  url: 'http://petstore.swagger.io/v2/store/order/%7BorderId%7D',\n  headers: {'content-type': 'application/json'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://petstore.swagger.io/v2/store/order/%7BorderId%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.delete(\"http://petstore.swagger.io/v2/store/order/%7BorderId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://petstore.swagger.io/v2/store/order/%7BorderId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"petstore.swagger.io\")\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"DELETE\", \"/v2/store/order/%7BorderId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"http://petstore.swagger.io/v2/store/order/%7BorderId%7D\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://petstore.swagger.io/v2/store/order/%7BorderId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"content-type\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/user": {
      "post": {
        "tags": ["user"],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": { "$ref": "#/definitions/User" }
          }
        ],
        "responses": { "default": { "description": "successful operation" } },
        "x-code-samples": [
          {
            "lang": "shell",
            "source": "curl --request POST \\\n  --url http://petstore.swagger.io/v2/user \\\n  --header 'content-type: application/json' \\\n  --data '{\"id\":0,\"username\":\"John78\",\"firstName\":\"John\",\"lastName\":\"Smith\",\"email\":\"john.smith@example.com\",\"password\":\"drowssaP123\",\"phone\":\"+1-202-555-0192\",\"userStatus\":0}'"
          },
          {
            "lang": "node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'POST',\n  url: 'http://petstore.swagger.io/v2/user',\n  headers: {'content-type': 'application/json'},\n  body: {\n    id: 0,\n    username: 'John78',\n    firstName: 'John',\n    lastName: 'Smith',\n    email: 'john.smith@example.com',\n    password: 'drowssaP123',\n    phone: '+1-202-555-0192',\n    userStatus: 0\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://petstore.swagger.io/v2/user');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json'\n));\n\n$request->setBody('{\"id\":0,\"username\":\"John78\",\"firstName\":\"John\",\"lastName\":\"Smith\",\"email\":\"john.smith@example.com\",\"password\":\"drowssaP123\",\"phone\":\"+1-202-555-0192\",\"userStatus\":0}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.post(\"http://petstore.swagger.io/v2/user\")\n  .header(\"content-type\", \"application/json\")\n  .body(\"{\\\"id\\\":0,\\\"username\\\":\\\"John78\\\",\\\"firstName\\\":\\\"John\\\",\\\"lastName\\\":\\\"Smith\\\",\\\"email\\\":\\\"john.smith@example.com\\\",\\\"password\\\":\\\"drowssaP123\\\",\\\"phone\\\":\\\"+1-202-555-0192\\\",\\\"userStatus\\\":0}\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://petstore.swagger.io/v2/user\"\n\n\tpayload := strings.NewReader(\"{\\\"id\\\":0,\\\"username\\\":\\\"John78\\\",\\\"firstName\\\":\\\"John\\\",\\\"lastName\\\":\\\"Smith\\\",\\\"email\\\":\\\"john.smith@example.com\\\",\\\"password\\\":\\\"drowssaP123\\\",\\\"phone\\\":\\\"+1-202-555-0192\\\",\\\"userStatus\\\":0}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"petstore.swagger.io\")\n\npayload = \"{\\\"id\\\":0,\\\"username\\\":\\\"John78\\\",\\\"firstName\\\":\\\"John\\\",\\\"lastName\\\":\\\"Smith\\\",\\\"email\\\":\\\"john.smith@example.com\\\",\\\"password\\\":\\\"drowssaP123\\\",\\\"phone\\\":\\\"+1-202-555-0192\\\",\\\"userStatus\\\":0}\"\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"POST\", \"/v2/user\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"http://petstore.swagger.io/v2/user\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddParameter(\"application/json\", \"{\\\"id\\\":0,\\\"username\\\":\\\"John78\\\",\\\"firstName\\\":\\\"John\\\",\\\"lastName\\\":\\\"Smith\\\",\\\"email\\\":\\\"john.smith@example.com\\\",\\\"password\\\":\\\"drowssaP123\\\",\\\"phone\\\":\\\"+1-202-555-0192\\\",\\\"userStatus\\\":0}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://petstore.swagger.io/v2/user\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"id\\\":0,\\\"username\\\":\\\"John78\\\",\\\"firstName\\\":\\\"John\\\",\\\"lastName\\\":\\\"Smith\\\",\\\"email\\\":\\\"john.smith@example.com\\\",\\\"password\\\":\\\"drowssaP123\\\",\\\"phone\\\":\\\"+1-202-555-0192\\\",\\\"userStatus\\\":0}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/user/{username}": {
      "get": {
        "tags": ["user"],
        "summary": "Get user by user name",
        "description": "",
        "operationId": "getUserByName",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/User" }
          },
          "400": { "description": "Invalid username supplied" },
          "404": { "description": "User not found" }
        },
        "x-code-samples": [
          {
            "lang": "shell",
            "source": "curl --request GET \\\n  --url http://petstore.swagger.io/v2/user/%7Busername%7D \\\n  --header 'content-type: application/json'"
          },
          {
            "lang": "node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'http://petstore.swagger.io/v2/user/%7Busername%7D',\n  headers: {'content-type': 'application/json'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://petstore.swagger.io/v2/user/%7Busername%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.get(\"http://petstore.swagger.io/v2/user/%7Busername%7D\")\n  .header(\"content-type\", \"application/json\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://petstore.swagger.io/v2/user/%7Busername%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"petstore.swagger.io\")\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"GET\", \"/v2/user/%7Busername%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"http://petstore.swagger.io/v2/user/%7Busername%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://petstore.swagger.io/v2/user/%7Busername%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "put": {
        "tags": ["user"],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be deleted",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": { "$ref": "#/definitions/User" }
          }
        ],
        "responses": {
          "400": { "description": "Invalid user supplied" },
          "404": { "description": "User not found" }
        },
        "x-code-samples": [
          {
            "lang": "shell",
            "source": "curl --request PUT \\\n  --url http://petstore.swagger.io/v2/user/%7Busername%7D \\\n  --header 'content-type: application/json' \\\n  --data '{\"id\":0,\"username\":\"John78\",\"firstName\":\"John\",\"lastName\":\"Smith\",\"email\":\"john.smith@example.com\",\"password\":\"drowssaP123\",\"phone\":\"+1-202-555-0192\",\"userStatus\":0}'"
          },
          {
            "lang": "node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'PUT',\n  url: 'http://petstore.swagger.io/v2/user/%7Busername%7D',\n  headers: {'content-type': 'application/json'},\n  body: {\n    id: 0,\n    username: 'John78',\n    firstName: 'John',\n    lastName: 'Smith',\n    email: 'john.smith@example.com',\n    password: 'drowssaP123',\n    phone: '+1-202-555-0192',\n    userStatus: 0\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://petstore.swagger.io/v2/user/%7Busername%7D');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json'\n));\n\n$request->setBody('{\"id\":0,\"username\":\"John78\",\"firstName\":\"John\",\"lastName\":\"Smith\",\"email\":\"john.smith@example.com\",\"password\":\"drowssaP123\",\"phone\":\"+1-202-555-0192\",\"userStatus\":0}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.put(\"http://petstore.swagger.io/v2/user/%7Busername%7D\")\n  .header(\"content-type\", \"application/json\")\n  .body(\"{\\\"id\\\":0,\\\"username\\\":\\\"John78\\\",\\\"firstName\\\":\\\"John\\\",\\\"lastName\\\":\\\"Smith\\\",\\\"email\\\":\\\"john.smith@example.com\\\",\\\"password\\\":\\\"drowssaP123\\\",\\\"phone\\\":\\\"+1-202-555-0192\\\",\\\"userStatus\\\":0}\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://petstore.swagger.io/v2/user/%7Busername%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"id\\\":0,\\\"username\\\":\\\"John78\\\",\\\"firstName\\\":\\\"John\\\",\\\"lastName\\\":\\\"Smith\\\",\\\"email\\\":\\\"john.smith@example.com\\\",\\\"password\\\":\\\"drowssaP123\\\",\\\"phone\\\":\\\"+1-202-555-0192\\\",\\\"userStatus\\\":0}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"petstore.swagger.io\")\n\npayload = \"{\\\"id\\\":0,\\\"username\\\":\\\"John78\\\",\\\"firstName\\\":\\\"John\\\",\\\"lastName\\\":\\\"Smith\\\",\\\"email\\\":\\\"john.smith@example.com\\\",\\\"password\\\":\\\"drowssaP123\\\",\\\"phone\\\":\\\"+1-202-555-0192\\\",\\\"userStatus\\\":0}\"\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"PUT\", \"/v2/user/%7Busername%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"http://petstore.swagger.io/v2/user/%7Busername%7D\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddParameter(\"application/json\", \"{\\\"id\\\":0,\\\"username\\\":\\\"John78\\\",\\\"firstName\\\":\\\"John\\\",\\\"lastName\\\":\\\"Smith\\\",\\\"email\\\":\\\"john.smith@example.com\\\",\\\"password\\\":\\\"drowssaP123\\\",\\\"phone\\\":\\\"+1-202-555-0192\\\",\\\"userStatus\\\":0}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://petstore.swagger.io/v2/user/%7Busername%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"id\\\":0,\\\"username\\\":\\\"John78\\\",\\\"firstName\\\":\\\"John\\\",\\\"lastName\\\":\\\"Smith\\\",\\\"email\\\":\\\"john.smith@example.com\\\",\\\"password\\\":\\\"drowssaP123\\\",\\\"phone\\\":\\\"+1-202-555-0192\\\",\\\"userStatus\\\":0}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "delete": {
        "tags": ["user"],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": { "description": "Invalid username supplied" },
          "404": { "description": "User not found" }
        },
        "x-code-samples": [
          {
            "lang": "shell",
            "source": "curl --request DELETE \\\n  --url http://petstore.swagger.io/v2/user/%7Busername%7D \\\n  --header 'content-type: application/json'"
          },
          {
            "lang": "node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'DELETE',\n  url: 'http://petstore.swagger.io/v2/user/%7Busername%7D',\n  headers: {'content-type': 'application/json'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://petstore.swagger.io/v2/user/%7Busername%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.delete(\"http://petstore.swagger.io/v2/user/%7Busername%7D\")\n  .header(\"content-type\", \"application/json\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://petstore.swagger.io/v2/user/%7Busername%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"petstore.swagger.io\")\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"DELETE\", \"/v2/user/%7Busername%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"http://petstore.swagger.io/v2/user/%7Busername%7D\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://petstore.swagger.io/v2/user/%7Busername%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"content-type\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/user/createWithArray": {
      "post": {
        "tags": ["user"],
        "summary": "Creates list of users with given input array",
        "description": "",
        "operationId": "createUsersWithArrayInput",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "List of user object",
            "required": true,
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/User" }
            }
          }
        ],
        "responses": { "default": { "description": "successful operation" } },
        "x-code-samples": [
          {
            "lang": "shell",
            "source": "curl --request POST \\\n  --url http://petstore.swagger.io/v2/user/createWithArray \\\n  --header 'content-type: application/json' \\\n  --data '[{\"id\":0,\"username\":\"John78\",\"firstName\":\"John\",\"lastName\":\"Smith\",\"email\":\"john.smith@example.com\",\"password\":\"drowssaP123\",\"phone\":\"+1-202-555-0192\",\"userStatus\":0}]'"
          },
          {
            "lang": "node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'POST',\n  url: 'http://petstore.swagger.io/v2/user/createWithArray',\n  headers: {'content-type': 'application/json'},\n  body: [\n    {\n      id: 0,\n      username: 'John78',\n      firstName: 'John',\n      lastName: 'Smith',\n      email: 'john.smith@example.com',\n      password: 'drowssaP123',\n      phone: '+1-202-555-0192',\n      userStatus: 0\n    }\n  ],\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://petstore.swagger.io/v2/user/createWithArray');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json'\n));\n\n$request->setBody('[{\"id\":0,\"username\":\"John78\",\"firstName\":\"John\",\"lastName\":\"Smith\",\"email\":\"john.smith@example.com\",\"password\":\"drowssaP123\",\"phone\":\"+1-202-555-0192\",\"userStatus\":0}]');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.post(\"http://petstore.swagger.io/v2/user/createWithArray\")\n  .header(\"content-type\", \"application/json\")\n  .body(\"[{\\\"id\\\":0,\\\"username\\\":\\\"John78\\\",\\\"firstName\\\":\\\"John\\\",\\\"lastName\\\":\\\"Smith\\\",\\\"email\\\":\\\"john.smith@example.com\\\",\\\"password\\\":\\\"drowssaP123\\\",\\\"phone\\\":\\\"+1-202-555-0192\\\",\\\"userStatus\\\":0}]\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://petstore.swagger.io/v2/user/createWithArray\"\n\n\tpayload := strings.NewReader(\"[{\\\"id\\\":0,\\\"username\\\":\\\"John78\\\",\\\"firstName\\\":\\\"John\\\",\\\"lastName\\\":\\\"Smith\\\",\\\"email\\\":\\\"john.smith@example.com\\\",\\\"password\\\":\\\"drowssaP123\\\",\\\"phone\\\":\\\"+1-202-555-0192\\\",\\\"userStatus\\\":0}]\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"petstore.swagger.io\")\n\npayload = \"[{\\\"id\\\":0,\\\"username\\\":\\\"John78\\\",\\\"firstName\\\":\\\"John\\\",\\\"lastName\\\":\\\"Smith\\\",\\\"email\\\":\\\"john.smith@example.com\\\",\\\"password\\\":\\\"drowssaP123\\\",\\\"phone\\\":\\\"+1-202-555-0192\\\",\\\"userStatus\\\":0}]\"\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"POST\", \"/v2/user/createWithArray\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"http://petstore.swagger.io/v2/user/createWithArray\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddParameter(\"application/json\", \"[{\\\"id\\\":0,\\\"username\\\":\\\"John78\\\",\\\"firstName\\\":\\\"John\\\",\\\"lastName\\\":\\\"Smith\\\",\\\"email\\\":\\\"john.smith@example.com\\\",\\\"password\\\":\\\"drowssaP123\\\",\\\"phone\\\":\\\"+1-202-555-0192\\\",\\\"userStatus\\\":0}]\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://petstore.swagger.io/v2/user/createWithArray\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"[{\\\"id\\\":0,\\\"username\\\":\\\"John78\\\",\\\"firstName\\\":\\\"John\\\",\\\"lastName\\\":\\\"Smith\\\",\\\"email\\\":\\\"john.smith@example.com\\\",\\\"password\\\":\\\"drowssaP123\\\",\\\"phone\\\":\\\"+1-202-555-0192\\\",\\\"userStatus\\\":0}]\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/user/createWithList": {
      "post": {
        "tags": ["user"],
        "summary": "Creates list of users with given input array",
        "description": "",
        "operationId": "createUsersWithListInput",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "List of user object",
            "required": true,
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/User" }
            }
          }
        ],
        "responses": { "default": { "description": "successful operation" } },
        "x-code-samples": [
          {
            "lang": "shell",
            "source": "curl --request POST \\\n  --url http://petstore.swagger.io/v2/user/createWithList \\\n  --header 'content-type: application/json' \\\n  --data '[{\"id\":0,\"username\":\"John78\",\"firstName\":\"John\",\"lastName\":\"Smith\",\"email\":\"john.smith@example.com\",\"password\":\"drowssaP123\",\"phone\":\"+1-202-555-0192\",\"userStatus\":0}]'"
          },
          {
            "lang": "node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'POST',\n  url: 'http://petstore.swagger.io/v2/user/createWithList',\n  headers: {'content-type': 'application/json'},\n  body: [\n    {\n      id: 0,\n      username: 'John78',\n      firstName: 'John',\n      lastName: 'Smith',\n      email: 'john.smith@example.com',\n      password: 'drowssaP123',\n      phone: '+1-202-555-0192',\n      userStatus: 0\n    }\n  ],\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://petstore.swagger.io/v2/user/createWithList');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json'\n));\n\n$request->setBody('[{\"id\":0,\"username\":\"John78\",\"firstName\":\"John\",\"lastName\":\"Smith\",\"email\":\"john.smith@example.com\",\"password\":\"drowssaP123\",\"phone\":\"+1-202-555-0192\",\"userStatus\":0}]');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.post(\"http://petstore.swagger.io/v2/user/createWithList\")\n  .header(\"content-type\", \"application/json\")\n  .body(\"[{\\\"id\\\":0,\\\"username\\\":\\\"John78\\\",\\\"firstName\\\":\\\"John\\\",\\\"lastName\\\":\\\"Smith\\\",\\\"email\\\":\\\"john.smith@example.com\\\",\\\"password\\\":\\\"drowssaP123\\\",\\\"phone\\\":\\\"+1-202-555-0192\\\",\\\"userStatus\\\":0}]\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://petstore.swagger.io/v2/user/createWithList\"\n\n\tpayload := strings.NewReader(\"[{\\\"id\\\":0,\\\"username\\\":\\\"John78\\\",\\\"firstName\\\":\\\"John\\\",\\\"lastName\\\":\\\"Smith\\\",\\\"email\\\":\\\"john.smith@example.com\\\",\\\"password\\\":\\\"drowssaP123\\\",\\\"phone\\\":\\\"+1-202-555-0192\\\",\\\"userStatus\\\":0}]\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"petstore.swagger.io\")\n\npayload = \"[{\\\"id\\\":0,\\\"username\\\":\\\"John78\\\",\\\"firstName\\\":\\\"John\\\",\\\"lastName\\\":\\\"Smith\\\",\\\"email\\\":\\\"john.smith@example.com\\\",\\\"password\\\":\\\"drowssaP123\\\",\\\"phone\\\":\\\"+1-202-555-0192\\\",\\\"userStatus\\\":0}]\"\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"POST\", \"/v2/user/createWithList\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"http://petstore.swagger.io/v2/user/createWithList\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddParameter(\"application/json\", \"[{\\\"id\\\":0,\\\"username\\\":\\\"John78\\\",\\\"firstName\\\":\\\"John\\\",\\\"lastName\\\":\\\"Smith\\\",\\\"email\\\":\\\"john.smith@example.com\\\",\\\"password\\\":\\\"drowssaP123\\\",\\\"phone\\\":\\\"+1-202-555-0192\\\",\\\"userStatus\\\":0}]\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://petstore.swagger.io/v2/user/createWithList\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"[{\\\"id\\\":0,\\\"username\\\":\\\"John78\\\",\\\"firstName\\\":\\\"John\\\",\\\"lastName\\\":\\\"Smith\\\",\\\"email\\\":\\\"john.smith@example.com\\\",\\\"password\\\":\\\"drowssaP123\\\",\\\"phone\\\":\\\"+1-202-555-0192\\\",\\\"userStatus\\\":0}]\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/user/login": {
      "get": {
        "tags": ["user"],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "type": "string" },
            "examples": {
              "application/json": "OK",
              "application/xml": "<message> OK </message>",
              "text/plain": "OK"
            },
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            }
          },
          "400": { "description": "Invalid username/password supplied" }
        },
        "x-code-samples": [
          {
            "lang": "shell",
            "source": "curl --request GET \\\n  --url 'http://petstore.swagger.io/v2/user/login?username=SOME_STRING_VALUE&password=SOME_STRING_VALUE' \\\n  --header 'content-type: application/json'"
          },
          {
            "lang": "node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'http://petstore.swagger.io/v2/user/login',\n  qs: {username: 'SOME_STRING_VALUE', password: 'SOME_STRING_VALUE'},\n  headers: {'content-type': 'application/json'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://petstore.swagger.io/v2/user/login');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData(array(\n  'username' => 'SOME_STRING_VALUE',\n  'password' => 'SOME_STRING_VALUE'\n));\n\n$request->setHeaders(array(\n  'content-type' => 'application/json'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.get(\"http://petstore.swagger.io/v2/user/login?username=SOME_STRING_VALUE&password=SOME_STRING_VALUE\")\n  .header(\"content-type\", \"application/json\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://petstore.swagger.io/v2/user/login?username=SOME_STRING_VALUE&password=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"petstore.swagger.io\")\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"GET\", \"/v2/user/login?username=SOME_STRING_VALUE&password=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"http://petstore.swagger.io/v2/user/login?username=SOME_STRING_VALUE&password=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://petstore.swagger.io/v2/user/login?username=SOME_STRING_VALUE&password=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/user/logout": {
      "get": {
        "tags": ["user"],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "logoutUser",
        "produces": ["application/xml", "application/json"],
        "parameters": [],
        "responses": { "default": { "description": "successful operation" } },
        "x-code-samples": [
          {
            "lang": "shell",
            "source": "curl --request GET \\\n  --url http://petstore.swagger.io/v2/user/logout \\\n  --header 'content-type: application/json'"
          },
          {
            "lang": "node",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'http://petstore.swagger.io/v2/user/logout',\n  headers: {'content-type': 'application/json'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://petstore.swagger.io/v2/user/logout');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.get(\"http://petstore.swagger.io/v2/user/logout\")\n  .header(\"content-type\", \"application/json\")\n  .asString();"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://petstore.swagger.io/v2/user/logout\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPConnection(\"petstore.swagger.io\")\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"GET\", \"/v2/user/logout\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "csharp",
            "source": "var client = new RestClient(\"http://petstore.swagger.io/v2/user/logout\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://petstore.swagger.io/v2/user/logout\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    }
  },
  "definitions": {
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": { "type": "integer", "format": "int32" },
        "type": { "type": "string" },
        "message": { "type": "string" }
      }
    },
    "Cat": {
      "description": "A representation of a cat",
      "allOf": [
        { "$ref": "#/definitions/Pet" },
        {
          "type": "object",
          "properties": {
            "huntingSkill": {
              "type": "string",
              "description": "The measured skill for hunting",
              "default": "lazy",
              "enum": ["clueless", "lazy", "adventurous", "aggressive"]
            }
          },
          "required": ["huntingSkill"]
        }
      ]
    },
    "Category": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Category ID",
          "allOf": [{ "$ref": "#/definitions/Id" }]
        },
        "name": {
          "description": "Category name",
          "type": "string",
          "minLength": 1
        },
        "sub": {
          "description": "Test Sub Category",
          "type": "object",
          "properties": {
            "prop1": { "type": "string", "description": "Dumb Property" }
          }
        }
      },
      "xml": { "name": "Category" }
    },
    "Dog": {
      "description": "A representation of a dog",
      "allOf": [
        { "$ref": "#/definitions/Pet" },
        {
          "type": "object",
          "properties": {
            "packSize": {
              "type": "integer",
              "format": "int32",
              "description": "The size of the pack the dog is from",
              "default": 1,
              "minimum": 1
            }
          },
          "required": ["packSize"]
        }
      ]
    },
    "HoneyBee": {
      "description": "A representation of a honey bee",
      "allOf": [
        { "$ref": "#/definitions/Pet" },
        {
          "type": "object",
          "properties": {
            "honeyPerDay": {
              "type": "number",
              "description": "Average amount of honey produced per day in ounces",
              "example": 3.14
            }
          },
          "required": ["honeyPerDay"]
        }
      ]
    },
    "Id": { "type": "integer", "format": "int64" },
    "Order": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Order ID",
          "allOf": [{ "$ref": "#/definitions/Id" }]
        },
        "petId": {
          "description": "Pet ID",
          "allOf": [{ "$ref": "#/definitions/Id" }]
        },
        "quantity": {
          "type": "integer",
          "format": "int32",
          "minimum": 1,
          "default": 1
        },
        "shipDate": {
          "description": "Estimated ship date",
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "Order Status",
          "enum": ["placed", "approved", "delivered"]
        },
        "complete": {
          "description": "Indicates whenever order was completed or not",
          "type": "boolean",
          "default": false
        }
      },
      "xml": { "name": "Order" }
    },
    "Pet": {
      "type": "object",
      "required": ["name", "photoUrls"],
      "discriminator": "petType",
      "properties": {
        "id": {
          "description": "Pet ID",
          "allOf": [{ "$ref": "#/definitions/Id" }]
        },
        "category": {
          "description": "Categories this pet belongs to",
          "allOf": [{ "$ref": "#/definitions/Category" }]
        },
        "name": {
          "description": "The name given to a pet",
          "type": "string",
          "example": "Guru"
        },
        "photoUrls": {
          "description": "The list of URL to a cute photos featuring pet",
          "type": "array",
          "xml": { "name": "photoUrl", "wrapped": true },
          "items": { "type": "string", "format": "url" }
        },
        "tags": {
          "description": "Tags attached to the pet",
          "type": "array",
          "xml": { "name": "tag", "wrapped": true },
          "items": { "$ref": "#/definitions/Tag" }
        },
        "status": {
          "type": "string",
          "description": "Pet status in the store",
          "enum": ["available", "pending", "sold"]
        },
        "petType": { "description": "Type of a pet", "type": "string" }
      },
      "xml": { "name": "Pet" }
    },
    "Tag": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Tag ID",
          "allOf": [{ "$ref": "#/definitions/Id" }]
        },
        "name": { "description": "Tag name", "type": "string", "minLength": 1 }
      },
      "xml": { "name": "Tag" }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": { "description": "User ID", "$ref": "#/definitions/Id" },
        "username": {
          "description": "User supplied username",
          "type": "string",
          "minLength": 4,
          "example": "John78"
        },
        "firstName": {
          "description": "User first name",
          "type": "string",
          "minLength": 1,
          "example": "John"
        },
        "lastName": {
          "description": "User last name",
          "type": "string",
          "minLength": 1,
          "example": "Smith"
        },
        "email": {
          "description": "User email address",
          "type": "string",
          "format": "email",
          "example": "john.smith@example.com"
        },
        "password": {
          "type": "string",
          "description": "User password, MUST contain a mix of upper and lower case letters, as well as digits",
          "format": "password",
          "minLength": 8,
          "pattern": "(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])",
          "example": "drowssaP123"
        },
        "phone": {
          "description": "User phone number in international format",
          "type": "string",
          "pattern": "^\\+(?:[0-9]-?){6,14}[0-9]$",
          "example": "+1-202-555-0192",
          "x-nullable": true
        },
        "userStatus": {
          "description": "User status",
          "type": "integer",
          "format": "int32"
        }
      },
      "xml": { "name": "User" }
    }
  }
}
